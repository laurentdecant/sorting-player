{"version":3,"sources":["src/algorithms.js","src/utils.js","src/index.js"],"names":["randomize","array","i","length","j","Math","floor","random","bubbleSort","render","selectionSort","min","insertionSort","mergeSort","aux","Array","sort","low","high","mid","k","merge","heapSort","sink","index","parent","child","quickSort","partition","pivot","run","action","delay","Promise","resolve","setTimeout","RED","GREEN","LENGTH","DELAY","initialize","items","ul","document","createElement","li","style","height","width","appendChild","getElementById","previous","indices","classList","remove","add","finalize","item","slice","replace","randomized","start","forEach"],"mappings":"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","file":"src.2196a7d8.js","sourceRoot":"..","sourcesContent":["const randomize = array => {\r\n  for (let i = 0; i < array.length; i++) {\r\n    array[i] = i + 1;\r\n  }\r\n  for (let i = 0; i < array.length; i++) {\r\n    const j = Math.floor(Math.random() * (array.length - i) + i);\r\n    [array[i], array[j]] = [array[j], array[i]];\r\n  }\r\n\r\n  return array;\r\n};\r\n\r\nconst bubbleSort = render => async array => {\r\n  for (let i = array.length - 1; i > 0; i--) {\r\n    for (let j = 0; j < i; j++) {\r\n      await render(j, j + 1);\r\n      if (array[j] > array[j + 1]) {\r\n        [array[j], array[j + 1]] = [array[j + 1], array[j]];\r\n        await render(j, j + 1);\r\n      }\r\n    }\r\n  }\r\n  await render();\r\n};\r\n\r\nconst selectionSort = render => async array => {\r\n  for (let i = 0; i < array.length; i++) {\r\n    let min = i;\r\n    for (let j = i + 1; j < array.length; j++) {\r\n      await render(j, min);\r\n      if (array[j] < array[min]) {\r\n        min = j;\r\n      }\r\n    }\r\n    [array[i], array[min]] = [array[min], array[i]];\r\n    await render(i, min);\r\n  }\r\n  await render();\r\n};\r\n\r\nconst insertionSort = render => async array => {\r\n  for (let i = 0; i < array.length; i++) {\r\n    for (let j = i; j > 0 && array[j - 1] > array[j]; j--) {\r\n      await render(j - 1, j);\r\n      [array[j - 1], array[j]] = [array[j], array[j - 1]];\r\n      await render(j - 1, j);\r\n    }\r\n  }\r\n  await render();\r\n};\r\n\r\nconst mergeSort = render => async array => {\r\n  const aux = new Array(array.length);\r\n  const merge = async (low, mid, high) => {\r\n    for (let k = low; k <= high; k += 1) {\r\n      await render(k);\r\n      aux[k] = array[k];\r\n      await render(k);\r\n    }\r\n    for (let i = low, j = mid + 1, k = low; k <= high; k += 1) {\r\n      await render(k);\r\n      if (j > high || (i < mid + 1 && aux[i] < aux[j])) {\r\n        array[k] = aux[i];\r\n        i += 1;\r\n      } else {\r\n        array[k] = aux[j];\r\n        j += 1;\r\n      }\r\n      await render(k);\r\n    }\r\n  };\r\n\r\n  const sort = async (low, high) => {\r\n    if (low < high) {\r\n      const mid = low + Math.floor((high - low) / 2);\r\n      await render(low, mid, high);\r\n      await sort(low, mid);\r\n      await sort(mid + 1, high);\r\n      await merge(low, mid, high);\r\n    }\r\n  };\r\n\r\n  await sort(0, array.length - 1);\r\n  await render();\r\n};\r\n\r\nconst heapSort = render => async array => {\r\n  const sink = async (index, length) => {\r\n    let parent = index;\r\n    let child = parent * 2 + 1;\r\n    while (\r\n      child <= length &&\r\n      (array[parent] < array[child] || array[parent] < array[child + 1])\r\n    ) {\r\n      await render(parent, child);\r\n      if (child < length && array[child] < array[child + 1]) {\r\n        child += 1;\r\n      }\r\n      if (array[parent] < array[child]) {\r\n        [array[parent], array[child]] = [array[child], array[parent]];\r\n        await render(parent, child);\r\n      }\r\n      parent = child;\r\n      child = child * 2 + 1;\r\n    }\r\n  };\r\n\r\n  const sort = async () => {\r\n    for (let i = Math.floor(array.length / 2); i >= 0; i -= 1) {\r\n      await render(i);\r\n      await sink(i, array.length - 1);\r\n    }\r\n\r\n    for (let i = array.length - 1; i > 0; i -= 1) {\r\n      await render(i);\r\n      [array[0], array[i]] = [array[i], array[0]];\r\n      await render(0, i);\r\n      await sink(0, i - 1);\r\n    }\r\n  };\r\n\r\n  await sort();\r\n  await render();\r\n};\r\n\r\nconst quickSort = render => async array => {\r\n  const partition = async (low, high) => {\r\n    let i = low + 1;\r\n    let j = high;\r\n    do {\r\n      await render(i, j);\r\n      while (i < high && array[i] < array[low]) {\r\n        await render(i);\r\n        i += 1;\r\n      }\r\n      while (j > low && array[j] > array[low]) {\r\n        await render(j);\r\n        j -= 1;\r\n      }\r\n      if (i < j) {\r\n        [array[i], array[j]] = [array[j], array[i]];\r\n        await render(i, j);\r\n      }\r\n    } while (i < j);\r\n    [array[low], array[j]] = [array[j], array[low]];\r\n    await render(low, j);\r\n\r\n    return j;\r\n  };\r\n\r\n  const sort = async (low, high) => {\r\n    if (low < high) {\r\n      const pivot = await partition(low, high);\r\n      await render(low, pivot, high);\r\n      await sort(low, pivot - 1);\r\n      await sort(pivot + 1, high);\r\n    }\r\n  };\r\n\r\n  await sort(0, array.length - 1);\r\n  await render();\r\n};\r\n\r\nexport {\r\n  randomize,\r\n  bubbleSort,\r\n  selectionSort,\r\n  insertionSort,\r\n  mergeSort,\r\n  quickSort,\r\n  heapSort\r\n};\r\n","const run = (action, delay) =>\r\n  new Promise(resolve =>\r\n    setTimeout(() => {\r\n      action();\r\n      resolve();\r\n    }, delay)\r\n  );\r\n\r\nexport { run };\r\n","import \"./styles.css\";\r\n\r\nimport {\r\n  randomize,\r\n  bubbleSort,\r\n  selectionSort,\r\n  insertionSort,\r\n  mergeSort,\r\n  heapSort,\r\n  quickSort\r\n} from \"./algorithms\";\r\nimport { run } from \"./utils\";\r\n\r\nconst RED = \"red\";\r\nconst GREEN = \"green\";\r\nconst LENGTH = 100;\r\nconst DELAY = 10;\r\n\r\nconst initialize = (array, items) => {\r\n  const ul = document.createElement(\"ul\");\r\n  for (let i = 0; i < array.length; i++) {\r\n    const li = document.createElement(\"li\");\r\n    li.style.height = `${array[i] * (100 / array.length)}%`;\r\n    li.style.width = `${100 / array.length}%`;\r\n    ul.appendChild(li);\r\n    items[i] = li;\r\n  }\r\n  document.getElementById(\"app\").appendChild(ul);\r\n};\r\n\r\nconst render = (array, items) => {\r\n  let previous = [];\r\n  return (...indices) =>\r\n    run(() => {\r\n      for (const index of previous) {\r\n        items[index].classList.remove(RED);\r\n        items[index].style.height = `${array[index] * (100 / items.length)}%`;\r\n      }\r\n      for (const index of indices) {\r\n        items[index].classList.add(RED);\r\n        items[index].style.height = `${array[index] * (100 / items.length)}%`;\r\n      }\r\n      previous = indices;\r\n    }, DELAY);\r\n};\r\n\r\nconst finalize = async items => {\r\n  await run(() => {\r\n    items[0].classList.add(RED);\r\n  }, DELAY);\r\n  let previous = items[0];\r\n  for (const item of items.slice(1)) {\r\n    await run(() => {\r\n      previous.classList.replace(RED, GREEN);\r\n      item.classList.add(RED);\r\n      previous = item;\r\n    }, DELAY);\r\n  }\r\n  await run(() => {\r\n    items[items.length - 1].classList.replace(RED, GREEN);\r\n  }, DELAY);\r\n};\r\n\r\nconst randomized = randomize(new Array(LENGTH));\r\nconst start = async sort => {\r\n  let array = randomized.slice();\r\n  const items = new Array(LENGTH);\r\n  initialize(array, items);\r\n  await sort(render(array, items))(array);\r\n  finalize(items);\r\n};\r\n\r\n[\r\n  bubbleSort,\r\n  selectionSort,\r\n  insertionSort,\r\n  mergeSort,\r\n  heapSort,\r\n  quickSort\r\n].forEach(start);\r\n"]}