{"version":3,"sources":["src/algorithms.js","src/utils.js","src/index.js"],"names":["randomize","array","i","length","j","Math","floor","random","bubbleSort","render","selectionSort","min","insertionSort","run","action","delay","Promise","resolve","setTimeout","RED","GREEN","LENGTH","DELAY","initialize","items","ul","document","createElement","li","style","height","width","appendChild","getElementById","previous","indices","index","classList","remove","add","finalize","item","slice","replace","start","Array","sort"],"mappings":"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","file":"src.15c59090.js","sourceRoot":"..","sourcesContent":["const randomize = array => {\r\n  for (let i = 0; i < array.length; i++) {\r\n    array[i] = i + 1;\r\n  }\r\n  for (let i = 0; i < array.length; i++) {\r\n    const j = Math.floor(Math.random() * (array.length - 1 - i) + i);\r\n    [array[i], array[j]] = [array[j], array[i]];\r\n  }\r\n};\r\n\r\nconst bubbleSort = async (array, render) => {\r\n  for (let i = array.length - 1; i > 0; i--) {\r\n    for (let j = 0; j < i; j++) {\r\n      await render(j, j + 1);\r\n      if (array[j] > array[j + 1]) {\r\n        [array[j], array[j + 1]] = [array[j + 1], array[j]];\r\n        await render(j, j + 1);\r\n      }\r\n    }\r\n  }\r\n  await render();\r\n};\r\n\r\nconst selectionSort = async (array, render) => {\r\n  for (let i = 0; i < array.length; i++) {\r\n    let min = i;\r\n    for (let j = i + 1; j < array.length; j++) {\r\n      await render(j, min);\r\n      if (array[j] < array[min]) {\r\n        min = j;\r\n      }\r\n    }\r\n    [array[i], array[min]] = [array[min], array[i]];\r\n    await render(i, min);\r\n  }\r\n  await render();\r\n};\r\n\r\nconst insertionSort = async (array, render) => {\r\n  for (let i = 0; i < array.length; i++) {\r\n    for (let j = i; j > 0 && array[j - 1] > array[j]; j--) {\r\n      await render(j - 1, j);\r\n      [array[j - 1], array[j]] = [array[j], array[j - 1]];\r\n      await render(j - 1, j);\r\n    }\r\n  }\r\n  await render();\r\n};\r\n\r\nexport { randomize, bubbleSort, selectionSort, insertionSort };\r\n","const run = (action, delay) =>\r\n  new Promise(resolve =>\r\n    setTimeout(() => {\r\n      action();\r\n      resolve();\r\n    }, delay)\r\n  );\r\n\r\nexport { run };\r\n","import \"./styles.css\";\r\n\r\nimport {\r\n  randomize,\r\n  bubbleSort,\r\n  selectionSort,\r\n  insertionSort\r\n} from \"./algorithms\";\r\nimport { run } from \"./utils\";\r\n\r\nconst RED = \"red\";\r\nconst GREEN = \"green\";\r\nconst LENGTH = 100;\r\nconst DELAY = 10;\r\n\r\nconst initialize = (array, items) => {\r\n  const ul = document.createElement(\"ul\");\r\n  for (let i = 0; i < array.length; i++) {\r\n    const li = document.createElement(\"li\");\r\n    li.style.height = `${array[i] * (100 / array.length)}%`;\r\n    li.style.width = `${100 / array.length}%`;\r\n    ul.appendChild(li);\r\n    items[i] = li;\r\n  }\r\n  document.getElementById(\"app\").appendChild(ul);\r\n};\r\n\r\nconst render = (array, items) => {\r\n  let previous = [];\r\n  return (...indices) =>\r\n    run(() => {\r\n      for (const index of previous) {\r\n        items[index].classList.remove(RED);\r\n        items[index].style.height = `${array[index] * (100 / items.length)}%`;\r\n      }\r\n      for (const index of indices) {\r\n        items[index].classList.add(RED);\r\n        items[index].style.height = `${array[index] * (100 / items.length)}%`;\r\n      }\r\n      previous = indices;\r\n    }, DELAY);\r\n};\r\n\r\nconst finalize = async items => {\r\n  await run(() => {\r\n    items[0].classList.add(RED);\r\n  }, DELAY);\r\n  let previous = items[0];\r\n  for (const item of items.slice(1)) {\r\n    await run(() => {\r\n      previous.classList.replace(RED, GREEN);\r\n      item.classList.add(RED);\r\n      previous = item;\r\n    }, DELAY);\r\n  }\r\n  await run(() => {\r\n    items[items.length - 1].classList.replace(RED, GREEN);\r\n  }, DELAY);\r\n};\r\n\r\nconst start = async sort => {\r\n  const array = new Array(LENGTH);\r\n  randomize(array);\r\n  const items = new Array(LENGTH);\r\n  initialize(array, items);\r\n  await sort(array, render(array, items));\r\n  finalize(items);\r\n};\r\n\r\nstart(bubbleSort);\r\nstart(selectionSort);\r\nstart(insertionSort);\r\n"]}